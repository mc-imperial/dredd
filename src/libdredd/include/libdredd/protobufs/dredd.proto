// Copyright 2022 The Dredd Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package dredd.protobufs;

message MutationInfo { repeated MutationInfoForFile info_for_files = 1; }

message MutationInfoForFile {
  string filename = 1;
  MutationTreeNode mutation_tree_root = 2;
}

message MutationTreeNode {
  repeated MutationGroup mutation_groups = 1;
  repeated MutationTreeNode children = 2;
}

message MutationGroup {
  oneof group {
    MutationRemoveStmt remove_stmt = 1;
    MutationReplaceExpr replace_expr = 2;
    MutationReplaceBinaryOperator replace_binary_operator = 3;
    MutationReplaceUnaryOperator replace_unary_operator = 4;
  }
}

message SourceLocation {
  uint32 line = 1;
  uint32 column = 2;
}

message MutationRemoveStmt {
  int32 mutation_id = 1;
  SourceLocation start = 2;
  SourceLocation end = 3;
  string snippet = 4;
}

enum MutationReplaceExprAction {
  InsertPreInc = 0;
  InsertPreDec = 1;
  InsertLNot = 2;
  InsertNot = 3;
  ReplaceWithZeroFloat = 4;
  ReplaceWithOneFloat = 5;
  ReplaceWithMinusOneFloat = 6;
  ReplaceWithZeroInt = 7;
  ReplaceWithOneInt = 8;
  ReplaceWithMinusOneInt = 9;
  ReplaceWithTrue = 10;
  ReplaceWithFalse = 11;
}

message MutationReplaceExprInstance {
  MutationReplaceExprAction action = 1;
  int32 mutation_id = 2;
}

message MutationReplaceExpr {
  SourceLocation start = 1;
  SourceLocation end = 2;
  string snippet = 3;
  repeated MutationReplaceExprInstance instances = 4;
}

enum MutationReplaceBinaryOperatorAction {
  ReplaceWithLHS = 0;
  ReplaceWithRHS = 1;
  ReplaceWithAdd = 2;
  ReplaceWithDiv = 3;
  ReplaceWithMul = 4;
  ReplaceWithRem = 5;
  ReplaceWithSub = 6;
  ReplaceWithAddAssign = 7;
  ReplaceWithAndAssign = 8;
  ReplaceWithAssign = 9;
  ReplaceWithDivAssign = 10;
  ReplaceWithMulAssign = 11;
  ReplaceWithOrAssign = 12;
  ReplaceWithRemAssign = 13;
  ReplaceWithShlAssign = 14;
  ReplaceWithShrAssign = 15;
  ReplaceWithSubAssign = 16;
  ReplaceWithXorAssign = 17;
  ReplaceWithAnd = 18;
  ReplaceWithOr = 19;
  ReplaceWithXor = 20;
  ReplaceWithLAnd = 21;
  ReplaceWithLOr = 22;
  ReplaceWithEQ = 23;
  ReplaceWithGE = 24;
  ReplaceWithGT = 25;
  ReplaceWithLE = 26;
  ReplaceWithLT = 27;
  ReplaceWithNE = 28;
  ReplaceWithShl = 29;
  ReplaceWithShr = 30;
}

message MutationReplaceBinaryOperatorInstance {
  MutationReplaceBinaryOperatorAction action = 1;
  int32 mutation_id = 2;
}

message MutationReplaceBinaryOperator {
  enum BinaryOperator { PLACEHOLDER = 0; }
  SourceLocation expr_start = 1;
  SourceLocation expr_end = 2;
  SourceLocation lhs_start = 3;
  SourceLocation lhs_end = 4;
  SourceLocation rhs_start = 5;
  SourceLocation rhs_end = 6;
  string expr_snippet = 7;
  string lhs_snippet = 8;
  string rhs_snippet = 9;
  BinaryOperator operator = 10;
  repeated MutationReplaceBinaryOperatorInstance instances = 11;
}

enum MutationReplaceUnaryOperatorAction {
  ReplaceWithOperand = 0;
  ReplaceWithMinus = 1;
  ReplaceWithNot = 2;
  ReplaceWithPreDec = 3;
  ReplaceWithPostDec = 4;
  ReplaceWithPreInc = 5;
  ReplaceWithPostInc = 6;
  ReplaceWithLNot = 7;
}

message MutationReplaceUnaryOperatorInstance {
  MutationReplaceUnaryOperatorAction action = 1;
  int32 mutation_id = 2;
}

message MutationReplaceUnaryOperator {
  enum UnaryOperator { PLACEHOLDER = 0; }
  SourceLocation expr_start = 1;
  SourceLocation expr_end = 2;
  SourceLocation operand_start = 3;
  SourceLocation operand_end = 4;
  string expr_snippet = 5;
  string operand_snippet = 6;
  UnaryOperator operator = 7;
  repeated MutationReplaceUnaryOperatorInstance instances = 8;
}
