#include <cstdlib>
#include <functional>

static bool __dredd_enabled_mutation(int local_mutation_id) {
  static bool initialized = false;
  static bool enabled[13];
  if (!initialized) {
    const char* __dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (__dredd_environment_variable != nullptr) {
      int value = atoi(__dredd_environment_variable);
      int local_value = value - 0;
      if (local_value >= 0 && local_value < 13) {
        enabled[local_value] = true;
      }
    }
    initialized = true;
  }
  return enabled[local_mutation_id];
}

static int __dredd_replace_binary_operator_Add_int_int(std::function<int()> arg1, std::function<int()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() / arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() * arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() % arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() - arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1();
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg2();
  return arg1() + arg2();
}

int main() {
  int x = 1;
  int y = 2;
  if (!__dredd_enabled_mutation(12)) { return __dredd_replace_binary_operator_Add_int_int([&]() -> int { return static_cast<int>(__dredd_replace_binary_operator_Add_int_int([&]() -> int { return static_cast<int>(x); }, [&]() -> int { return static_cast<int>(y); }, 0)); }, [&]() -> int { return static_cast<int>(x); }, 6); }
}
