#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 53) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_EXPR_FLOAT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0.0
#define REPLACE_EXPR_FLOAT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1.0
#define REPLACE_EXPR_FLOAT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1.0
#define REPLACE_BINARY_SubAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) -= arg2
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_MulAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) *= arg2
#define REPLACE_BINARY_Mul(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2
#define REPLACE_BINARY_DivAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) /= arg2
#define REPLACE_BINARY_Div(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2
#define REPLACE_BINARY_AddAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) += arg2
#define REPLACE_BINARY_ARG2(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2
#define REPLACE_BINARY_ARG1(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define MUTATION_EXPR_INC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++((*arg))
#define MUTATION_EXPR_DEC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --((*arg))
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  MUTATION_EXPR_NOT(1);
  MUTATION_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_expr_float_lvalue(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  MUTATION_EXPR_INC(0);
  MUTATION_EXPR_DEC(1);
  return MUTATION_RETURN((*arg));
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_binary_operator_Assign_arg1_float_arg2_float(float* arg1, float arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) = arg2);
  REPLACE_BINARY_AddAssign(0);
  REPLACE_BINARY_DivAssign(1);
  REPLACE_BINARY_MulAssign(2);
  REPLACE_BINARY_SubAssign(3);
  return MUTATION_RETURN((*arg1) = arg2);
}

static float __dredd_replace_binary_operator_Add_arg1_float_arg2_float(float arg1, float arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Sub(2);
  REPLACE_BINARY_ARG1(3);
  REPLACE_BINARY_ARG2(4);
  return MUTATION_RETURN(arg1 + arg2);
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

int main() {
  float x = __dredd_replace_expr_float(__dredd_replace_expr_double(5.235, 0), 4);
  float y = __dredd_replace_expr_float(__dredd_replace_expr_double(754.34623, 8), 12);
  float z;
  if (!__dredd_enabled_mutation(45)) { __dredd_replace_expr_float(__dredd_replace_binary_operator_Assign_arg1_float_arg2_float(&(z) , __dredd_replace_expr_float(__dredd_replace_binary_operator_Add_arg1_float_arg2_float(__dredd_replace_expr_float(__dredd_replace_expr_float_lvalue(&(x), 16), 18) , __dredd_replace_expr_float(__dredd_replace_expr_float_lvalue(&(y), 22), 24), 28), 33), 37), 41); }
  if (!__dredd_enabled_mutation(52)) { return __dredd_replace_expr_int(0, 46); }
}
