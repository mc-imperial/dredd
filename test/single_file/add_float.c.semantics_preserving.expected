static unsigned long long int no_op = 0;

#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

#include <limits.h>
#include <float.h>
#include <math.h>
#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INC(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_DEC(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_float_arg2_float(arg1, arg2) if (!(fabsf((0.5f * (arg1)) - (0.5f * (arg2))) > (0.5f * FLT_MAX)) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_SubAssign_arg1_float_arg2_float(arg1, arg2) if (!(fabsf((0.5f * (arg1)) - (0.5f * (arg2))) > (0.5f * FLT_MAX)) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_float_arg2_float(arg1, arg2) if (!(fabsf((0x1.0p-100f * (arg1)) * (0x1.0p-28f * (arg2))) > (0x1.0p-100f * (0x1.0p-28f * FLT_MAX))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_float_arg2_float(arg1, arg2) if (!(fabsf((0x1.0p-100f * (arg1)) * (0x1.0p-28f * (arg2))) > (0x1.0p-100f * (0x1.0p-28f * FLT_MAX))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_float_arg2_float(arg1, arg2) if (!((fabsf((arg2)) < 1.0f) && ((((arg2) == 0.0f) || (fabsf((0x1.0p-49f * (arg1)) / (0x1.0p100f * (arg2)))) > (0x1.0p-100f * (0x1.0p-49f * FLT_MAX))))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_float_arg2_float(arg1, arg2) if (!((fabsf((arg2)) < 1.0f) && ((((arg2) == 0.0f) || (fabsf((0x1.0p-49f * (arg1)) / (0x1.0p100f * (arg2)))) > (0x1.0p-100f * (0x1.0p-49f * FLT_MAX))))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_AddAssign_arg1_float_arg2_float(arg1, arg2) if (!(fabsf((0.5f * (arg1)) + (0.5f * (arg2))) > (0.5f * FLT_MAX)) && (arg1 + arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int_zero(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_expr_float_lvalue(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg),float);
  REPLACE_EXPR_INC((*arg));
  REPLACE_EXPR_DEC((*arg));
  return MUTATION_RETURN((*arg));
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,float);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_FLOAT_ZERO(0.0);
  REPLACE_EXPR_FLOAT_ONE(1.0);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static float __dredd_replace_binary_operator_Assign_arg1_float_arg2_float(float* arg1, float arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) = arg2,float);
  REPLACE_BINARY_AddAssign_arg1_float_arg2_float((*arg1), arg2);
  REPLACE_BINARY_DivAssign_arg1_float_arg2_float((*arg1), arg2);
  REPLACE_BINARY_MulAssign_arg1_float_arg2_float((*arg1), arg2);
  REPLACE_BINARY_SubAssign_arg1_float_arg2_float((*arg1), arg2);
  return MUTATION_RETURN((*arg1) = arg2);
}

__attribute__((always_inline)) static float __dredd_replace_binary_operator_Add_arg1_float_arg2_float(float arg1, float arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,float);
  REPLACE_BINARY_Div_arg1_float_arg2_float(arg1, arg2);
  REPLACE_BINARY_Mul_arg1_float_arg2_float(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_float_arg2_float(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  float x = __dredd_replace_expr_float(5.235, 0);
  float y = __dredd_replace_expr_float(754.34623, 4);
  float z;
  __dredd_replace_binary_operator_Assign_arg1_float_arg2_float(&(z) , __dredd_replace_expr_float(__dredd_replace_binary_operator_Add_arg1_float_arg2_float(__dredd_replace_expr_float(__dredd_replace_expr_float_lvalue(&(x), 8), 10) , __dredd_replace_expr_float(__dredd_replace_expr_float_lvalue(&(y), 14), 16), 20), 25), 29);
  return __dredd_replace_expr_int_zero(0, 34);
}
