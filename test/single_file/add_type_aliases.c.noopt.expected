#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[4];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 231) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define REPLACE_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define REPLACE_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_EXPR_INC_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++((*arg))
#define REPLACE_EXPR_DEC_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --((*arg))
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_Rem(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 % arg2
#define REPLACE_BINARY_Mul(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2
#define REPLACE_BINARY_Div(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2
#define REPLACE_BINARY_ARG2(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2
#define REPLACE_BINARY_ARG1(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static unsigned long __dredd_replace_expr_unsigned_long_lvalue(unsigned long* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC_POINTER(0);
  REPLACE_EXPR_DEC_POINTER(1);
  return MUTATION_RETURN((*arg));
}

static unsigned long __dredd_replace_expr_unsigned_long(unsigned long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_INT_ZERO(2);
  REPLACE_EXPR_INT_ONE(3);
  return MUTATION_RETURN(arg);
}

static unsigned long __dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(unsigned long arg1, unsigned long arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 + arg2);
}

static unsigned int __dredd_replace_expr_unsigned_int_lvalue(unsigned int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC_POINTER(0);
  REPLACE_EXPR_DEC_POINTER(1);
  return MUTATION_RETURN((*arg));
}

static unsigned int __dredd_replace_expr_unsigned_int(unsigned int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_INT_ZERO(2);
  REPLACE_EXPR_INT_ONE(3);
  return MUTATION_RETURN(arg);
}

static unsigned int __dredd_replace_binary_operator_Add_arg1_unsigned_int_arg2_unsigned_int(unsigned int arg1, unsigned int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 + arg2);
}

static long __dredd_replace_expr_long_lvalue(long* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC_POINTER(0);
  REPLACE_EXPR_DEC_POINTER(1);
  return MUTATION_RETURN((*arg));
}

static long __dredd_replace_expr_long(long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static long __dredd_replace_binary_operator_Add_arg1_long_arg2_long(long arg1, long arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_expr_int_lvalue(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC_POINTER(0);
  REPLACE_EXPR_DEC_POINTER(1);
  return MUTATION_RETURN((*arg));
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 + arg2);
}

#include <inttypes.h>
#include <stddef.h>

int main() {
  unsigned a;
  uint32_t b;
  int c;
  int32_t d;
  unsigned long e;
  size_t f;
  long g;
  int64_t h;
  uint64_t i;

  if (!__dredd_enabled_mutation(22)) { __dredd_replace_expr_unsigned_int(__dredd_replace_binary_operator_Add_arg1_unsigned_int_arg2_unsigned_int(__dredd_replace_expr_unsigned_int(__dredd_replace_expr_unsigned_int_lvalue(&(a), 0), 2) , __dredd_replace_expr_unsigned_int(__dredd_replace_expr_unsigned_int_lvalue(&(a), 6), 8), 12), 18); }
  if (!__dredd_enabled_mutation(45)) { __dredd_replace_expr_unsigned_int(__dredd_replace_binary_operator_Add_arg1_unsigned_int_arg2_unsigned_int(__dredd_replace_expr_unsigned_int(__dredd_replace_expr_unsigned_int_lvalue(&(b), 23), 25) , __dredd_replace_expr_unsigned_int(__dredd_replace_expr_unsigned_int_lvalue(&(b), 29), 31), 35), 41); }
  if (!__dredd_enabled_mutation(74)) { __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(c), 46), 48) , __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(c), 54), 56), 62), 68); }
  if (!__dredd_enabled_mutation(103)) { __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(d), 75), 77) , __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(d), 83), 85), 91), 97); }
  if (!__dredd_enabled_mutation(126)) { __dredd_replace_expr_unsigned_long(__dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(__dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(e), 104), 106) , __dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(e), 110), 112), 116), 122); }
  if (!__dredd_enabled_mutation(149)) { __dredd_replace_expr_unsigned_long(__dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(__dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(f), 127), 129) , __dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(f), 133), 135), 139), 145); }
  if (!__dredd_enabled_mutation(178)) { __dredd_replace_expr_long(__dredd_replace_binary_operator_Add_arg1_long_arg2_long(__dredd_replace_expr_long(__dredd_replace_expr_long_lvalue(&(g), 150), 152) , __dredd_replace_expr_long(__dredd_replace_expr_long_lvalue(&(g), 158), 160), 166), 172); }
  if (!__dredd_enabled_mutation(207)) { __dredd_replace_expr_long(__dredd_replace_binary_operator_Add_arg1_long_arg2_long(__dredd_replace_expr_long(__dredd_replace_expr_long_lvalue(&(h), 179), 181) , __dredd_replace_expr_long(__dredd_replace_expr_long_lvalue(&(h), 187), 189), 195), 201); }
  if (!__dredd_enabled_mutation(230)) { __dredd_replace_expr_unsigned_long(__dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(__dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(i), 208), 210) , __dredd_replace_expr_unsigned_long(__dredd_replace_expr_unsigned_long_lvalue(&(i), 214), 216), 220), 226); }
}
