#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 44) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define REPLACE_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define REPLACE_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static long long __dredd_replace_expr_long_long(long long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static long long __dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_lhs(long long arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return 1;
  return arg;
}
static long long __dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_rhs(long long arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return 1;
  return arg;
}
static long __dredd_replace_expr_long(long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static long __dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_rhs(long arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return 1;
  return arg;
}
static long __dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_lhs(long arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return 1;
  return arg;
}
static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_outer(int arg, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  return MUTATION_RETURN(arg);
}
static int __dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_outer(int arg, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !arg;
  return MUTATION_RETURN(arg);
}
int main() {
    if (!__dredd_enabled_mutation(21)) { __dredd_replace_expr_int(__dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_outer(__dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_lhs(__dredd_replace_expr_long_long(5LL, 0), 12) && __dredd_replace_binary_operator_LAnd_arg1_long_long_arg2_long_rhs(__dredd_replace_expr_long(4L, 6), 12), 12), 15); }
    if (!__dredd_enabled_mutation(43)) { __dredd_replace_expr_int(__dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_outer(__dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_lhs(__dredd_replace_expr_long(4L, 22), 34) && __dredd_replace_binary_operator_LAnd_arg1_long_arg2_long_long_rhs(__dredd_replace_expr_long_long(5LL, 28), 34), 34), 37); }
}
