#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[3];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 135) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_BINARY_XorAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) ^= arg2
#define REPLACE_BINARY_SubAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) -= arg2
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_ShrAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) >>= arg2
#define REPLACE_BINARY_ShlAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) <<= arg2
#define REPLACE_BINARY_RemAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) %= arg2
#define REPLACE_BINARY_Rem(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 % arg2
#define REPLACE_BINARY_OrAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) |= arg2
#define REPLACE_BINARY_MulAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) *= arg2
#define REPLACE_BINARY_DivAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) /= arg2
#define REPLACE_BINARY_Div(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2
#define REPLACE_BINARY_AndAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) &= arg2
#define REPLACE_BINARY_AddAssign_LHS_POINTER(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return (*arg1) += arg2
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_expr_int_zero(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_INT_ONE(0);
  REPLACE_EXPR_INT_MINUS_ONE(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_one(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_NOT(0);
  REPLACE_EXPR_INT_ZERO(1);
  REPLACE_EXPR_INT_MINUS_ONE(2);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_minus_one(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int* arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) = arg2);
  REPLACE_BINARY_AddAssign_LHS_POINTER(0);
  REPLACE_BINARY_AndAssign_LHS_POINTER(1);
  REPLACE_BINARY_DivAssign_LHS_POINTER(2);
  REPLACE_BINARY_MulAssign_LHS_POINTER(3);
  REPLACE_BINARY_OrAssign_LHS_POINTER(4);
  REPLACE_BINARY_RemAssign_LHS_POINTER(5);
  REPLACE_BINARY_ShlAssign_LHS_POINTER(6);
  REPLACE_BINARY_ShrAssign_LHS_POINTER(7);
  REPLACE_BINARY_SubAssign_LHS_POINTER(8);
  REPLACE_BINARY_XorAssign_LHS_POINTER(9);
  return MUTATION_RETURN((*arg1) = arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_zero(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_minus_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_one_lhs_minus_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Rem(0);
  REPLACE_BINARY_Sub(1);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_zero(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Sub(0);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Rem(1);
  REPLACE_BINARY_Sub(2);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  int x = __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_zero(__dredd_replace_expr_int_zero(0, 0) , __dredd_replace_expr_int_zero(0, 2), 4), 5);
  if (!__dredd_enabled_mutation(25)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_one(__dredd_replace_expr_int_zero(0, 7) + __dredd_replace_expr_int_one(1, 9), 12), 15); }
  if (!__dredd_enabled_mutation(45)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_one(__dredd_replace_expr_int_one(1, 26) , __dredd_replace_expr_int_zero(0, 29), 31), 32), 35); }
  if (!__dredd_enabled_mutation(66)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_minus_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_zero(__dredd_replace_expr_int_zero(0, 46) , __dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 48), 51), 53), 54), 56); }
  if (!__dredd_enabled_mutation(87)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_minus_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_minus_one(__dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 67), 70) , __dredd_replace_expr_int_zero(0, 72), 74), 75), 77); }
  if (!__dredd_enabled_mutation(111)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_one(__dredd_replace_expr_int_one(1, 88) , __dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 91), 94), 96), 99), 101); }
  if (!__dredd_enabled_mutation(134)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(x) , __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_one_lhs_minus_one(__dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 112), 115) , __dredd_replace_expr_int_one(1, 117), 120), 122), 124); }
}
