#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[5];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 270) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_UNARY_Not(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~arg
#define REPLACE_UNARY_LNot(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !arg
#define REPLACE_UNARY_ARG(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_BINARY_XorAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 ^= arg2
#define REPLACE_BINARY_SubAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 -= arg2
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_ShrAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 >>= arg2
#define REPLACE_BINARY_ShlAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 <<= arg2
#define REPLACE_BINARY_RemAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 %= arg2
#define REPLACE_BINARY_Rem(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 % arg2
#define REPLACE_BINARY_OrAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 |= arg2
#define REPLACE_BINARY_MulAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 *= arg2
#define REPLACE_BINARY_Mul(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2
#define REPLACE_BINARY_DivAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 /= arg2
#define REPLACE_BINARY_Div(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2
#define REPLACE_BINARY_AndAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 &= arg2
#define REPLACE_BINARY_AddAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 += arg2
#define REPLACE_BINARY_ARG2(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2
#define REPLACE_BINARY_ARG1(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int& __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int& arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 = arg2);
  REPLACE_BINARY_AddAssign(0);
  REPLACE_BINARY_AndAssign(1);
  REPLACE_BINARY_DivAssign(2);
  REPLACE_BINARY_MulAssign(3);
  REPLACE_BINARY_OrAssign(4);
  REPLACE_BINARY_RemAssign(5);
  REPLACE_BINARY_ShlAssign(6);
  REPLACE_BINARY_ShrAssign(7);
  REPLACE_BINARY_SubAssign(8);
  REPLACE_BINARY_XorAssign(9);
  return MUTATION_RETURN(arg1 = arg2);
}

static int __dredd_replace_unary_operator_Minus_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(-arg);
  REPLACE_UNARY_Not(0);
  REPLACE_UNARY_LNot(1);
  REPLACE_UNARY_ARG(2);
  return MUTATION_RETURN(-arg);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  MUTATION_EXPR_NOT(1);
  MUTATION_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  int x = __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(0, 0) , __dredd_replace_expr_int(0, 6), 12), 18);
  if (!__dredd_enabled_mutation(58)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(0, 24) , __dredd_replace_expr_int(1, 30), 36), 42), 48); }
  if (!__dredd_enabled_mutation(93)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(1, 59) , __dredd_replace_expr_int(0, 65), 71), 77), 83); }
  if (!__dredd_enabled_mutation(137)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(0, 94) , __dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(1, 100), 106), 109), 115), 121), 127); }
  if (!__dredd_enabled_mutation(181)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(1, 138), 144), 147) , __dredd_replace_expr_int(0, 153), 159), 165), 171); }
  if (!__dredd_enabled_mutation(225)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(1, 182) , __dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(1, 188), 194), 197), 203), 209), 215); }
  if (!__dredd_enabled_mutation(269)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(1, 226), 232), 235) , __dredd_replace_expr_int(1, 241), 247), 253), 259); }
}
