static unsigned long long int no_op = 0;

#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_XorAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 ^ arg2) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)^(arg2)) & ((((arg1) ^ (((arg1)^(arg2)) & (~std::numeric_limits<int>::max())))-(arg2))^(arg2))) < 0) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_SubAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)^(arg2)) & ((((arg1) ^ (((arg1)^(arg2)) & (~std::numeric_limits<int>::max())))-(arg2))^(arg2))) < 0) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShrAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg1) < 0) || ((arg2) < 0) || ((arg2) >= 32)) && (arg1 >> arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShlAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg1) < 0) || ((arg2) < 0) || ((arg2) >= 32) || ((arg1) > (std::numeric_limits<int>::max() >> (arg2)))) && (arg1 << arg2) != actual_result) no_op++
#define REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_RemAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_OrAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 | arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1) > 0) && ((arg2) > 0) && ((arg1) > (std::numeric_limits<int>::max() / (arg2)))) || (((arg1) > 0) && ((arg2) <= 0) && ((arg2) < (std::numeric_limits<int>::lowest() / (arg1)))) || (((arg1) <= 0) && ((arg2) > 0) && ((arg1) < (std::numeric_limits<int>::lowest() / (arg2)))) || (((arg1) <= 0) && ((arg2) <= 0) && ((arg1) != 0) && ((arg2) < (std::numeric_limits<int>::max() / (arg1))))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_AndAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 & arg2) != actual_result) no_op++
#define REPLACE_BINARY_AddAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)>0) && ((arg2)>0) && ((arg1) > (std::numeric_limits<int>::max()-(arg2)))) || (((arg1)<0) && ((arg2)<0) && ((arg1) < (std::numeric_limits<int>::lowest()-(arg2))))) && (arg1 + arg2) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int_zero(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_one(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_minus_one(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static int& __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int& arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 = arg2,int&);
  REPLACE_BINARY_AddAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_AndAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_DivAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_MulAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_OrAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_RemAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_ShlAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_ShrAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_SubAssign_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_XorAssign_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 = arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_zero(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_minus_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_one_lhs_minus_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_zero(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_one(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  int x = __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_zero(__dredd_replace_expr_int_zero(0, 0) , __dredd_replace_expr_int_zero(0, 2), 4), 5);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_one(__dredd_replace_expr_int_zero(0, 7) + __dredd_replace_expr_int_one(1, 9), 12), 15);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_one(__dredd_replace_expr_int_one(1, 26) , __dredd_replace_expr_int_zero(0, 29), 31), 32), 35);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_minus_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_zero(__dredd_replace_expr_int_zero(0, 46) , __dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 48), 51), 53), 54), 56);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_minus_one(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_zero_lhs_minus_one(__dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 67), 70) , __dredd_replace_expr_int_zero(0, 72), 74), 75), 77);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_minus_one_lhs_one(__dredd_replace_expr_int_one(1, 88) , __dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 91), 94), 96), 99), 101);
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(x , __dredd_replace_expr_int_zero(__dredd_replace_binary_operator_Add_arg1_int_arg2_int_rhs_one_lhs_minus_one(__dredd_replace_expr_int_minus_one(-__dredd_replace_expr_int_one(1, 112), 115) , __dredd_replace_expr_int_one(1, 117), 120), 122), 124);
}
