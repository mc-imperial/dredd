static unsigned long long int no_op = 0;

#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_TRUE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FALSE(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_XorAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg1 ^ arg2) != actual_result) no_op++
#define REPLACE_BINARY_SubAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShrAssign_arg1_bool_arg2_bool(arg1, arg2) if (!((arg2) >= 32) && (arg1 >> arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShlAssign_arg1_bool_arg2_bool(arg1, arg2) if (!(((arg2) >= 32) || ((arg1) > (std::numeric_limits<bool>::max() >> (arg2)))) && (arg1 << arg2) != actual_result) no_op++
#define REPLACE_BINARY_RemAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg2) != 0 && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_OrAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg1 | arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_bool_arg2_bool(arg1, arg2) if (((unsigned long long)arg1 * (unsigned long long)arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg2 != 0) &&(arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_AndAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg1 & arg2) != actual_result) no_op++
#define REPLACE_BINARY_AddAssign_arg1_bool_arg2_bool(arg1, arg2) if ((arg1 + arg2) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static bool __dredd_replace_expr_bool_true(bool arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,bool);
  REPLACE_EXPR_FALSE(false);
  return MUTATION_RETURN(arg);
}

static bool __dredd_replace_expr_bool_false(bool arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,bool);
  REPLACE_EXPR_TRUE(true);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static bool& __dredd_replace_binary_operator_Assign_arg1_bool_arg2_bool(bool& arg1, bool arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 = arg2,bool&);
  REPLACE_BINARY_AddAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_AndAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_DivAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_MulAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_OrAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_RemAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_ShlAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_ShrAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_SubAssign_arg1_bool_arg2_bool(arg1, arg2);
  REPLACE_BINARY_XorAssign_arg1_bool_arg2_bool(arg1, arg2);
  return MUTATION_RETURN(arg1 = arg2);
}

int main() {
  bool x = __dredd_replace_expr_bool_true(true, 0);
  __dredd_replace_binary_operator_Assign_arg1_bool_arg2_bool(x , __dredd_replace_expr_bool_false(false, 1), 2);
}
