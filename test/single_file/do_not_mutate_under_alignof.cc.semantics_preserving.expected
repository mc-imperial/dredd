#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
static thread_local unsigned long long int no_op = 0;

#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2) if ((arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_Rem_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2) if ((arg2) != 0 && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2) if (((unsigned long long)arg1 * (unsigned long long)arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2) if ((arg2 != 0) &&(arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static unsigned long __dredd_replace_expr_unsigned_long_constant(unsigned long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,unsigned long);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static unsigned long __dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(unsigned long arg1, unsigned long arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,unsigned long);
  REPLACE_BINARY_Div_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2);
  REPLACE_BINARY_Mul_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2);
  REPLACE_BINARY_Rem_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

int foo(int* x, int y) {
  // No mutation inside the `alignof` should occur
  return __dredd_replace_expr_int_constant(__dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(__dredd_replace_expr_unsigned_long_constant(alignof(x[y + 3]), 0) , __dredd_replace_expr_unsigned_long_constant(alignof(y), 3), 6), 12);
}
