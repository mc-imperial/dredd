#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 18) {
          enabled_bitset[local_value / 64] |= ((uint64_t) 1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & ((uint64_t) 1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_NOT(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_MINUS(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ZERO(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_MINUS_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_BINARY_Sub_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2;
#define REPLACE_BINARY_Rem_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 % arg2;
#define REPLACE_BINARY_Mul_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2;
#define REPLACE_BINARY_Div_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2;
#define REPLACE_BINARY_ARG2(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_BINARY_ARG1(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static unsigned long __dredd_replace_expr_unsigned_long_constant(unsigned long arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_NOT(arg, 0);
  REPLACE_EXPR_INT_ZERO(0, 1);
  REPLACE_EXPR_INT_ONE(1, 2);
  return MUTATION_RETURN(arg);
}

static unsigned long __dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(unsigned long arg1, unsigned long arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, 0);
  REPLACE_BINARY_Mul_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, 1);
  REPLACE_BINARY_Rem_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, 2);
  REPLACE_BINARY_Sub_arg1_unsigned_long_arg2_unsigned_long(arg1, arg2, 3);
  REPLACE_BINARY_ARG1(arg1, 4);
  REPLACE_BINARY_ARG2(arg2, 5);
  return MUTATION_RETURN(arg1 + arg2);
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_NOT(arg, 0);
  REPLACE_EXPR_MINUS(arg, 1);
  REPLACE_EXPR_INT_ZERO(0, 2);
  REPLACE_EXPR_INT_ONE(1, 3);
  REPLACE_EXPR_INT_MINUS_ONE(-1, 4);
  return MUTATION_RETURN(arg);
}

int foo(int* x, int y) {
  // No mutation inside the `sizeof` should occur
  if (!__dredd_enabled_mutation(17)) { return __dredd_replace_expr_int_constant(__dredd_replace_binary_operator_Add_arg1_unsigned_long_arg2_unsigned_long(__dredd_replace_expr_unsigned_long_constant(sizeof(x[y + 3]), 0) , __dredd_replace_expr_unsigned_long_constant(sizeof(y), 3), 6), 12); }
}
