#include <inttypes.h>
#include <stdlib.h>
#include <string.h>
static int __dredd_enabled_mutation(int local_mutation_id) {
  static int initialized = 0;
  static uint64_t enabled_bitset[1];
  if (!initialized) {
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 16) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

static float __dredd_replace_binary_operator_SubAssign_float_double(float* arg1, double arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return (*arg1) += arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return (*arg1) = arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return (*arg1) /= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return (*arg1) *= arg2;
  return (*arg1) -= arg2;
}

static double __dredd_replace_binary_operator_Add_double_double(double arg1, double arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 / arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 * arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 - arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg2;
  return arg1 + arg2;
}

static double __dredd_replace_binary_operator_AddAssign_double_double(double* arg1, double arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return (*arg1) = arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return (*arg1) /= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return (*arg1) *= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return (*arg1) -= arg2;
  return (*arg1) += arg2;
}

int main() {
  double x = 5.32;
  if (!__dredd_enabled_mutation(13)) { __dredd_replace_binary_operator_AddAssign_double_double(&(x), 0.5, 0); }
  float y = 64343.7;
  if (!__dredd_enabled_mutation(14)) { __dredd_replace_binary_operator_SubAssign_float_double(&(y), 1.2, 4); }
  double z = x * 5.5;
  if (!__dredd_enabled_mutation(15)) { return __dredd_replace_binary_operator_Add_double_double(z, x, 8); }
}
