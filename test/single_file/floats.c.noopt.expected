#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 89) {
          enabled_bitset[local_value / 64] |= ((uint64_t) 1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & ((uint64_t) 1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_NOT(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_MINUS(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_LNOT(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ZERO(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_MINUS_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INC(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_ZERO(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_MINUS_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_DEC(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2;
#define REPLACE_BINARY_SubAssign_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 -= arg2;
#define REPLACE_BINARY_Mul_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2;
#define REPLACE_BINARY_MulAssign_arg1_float_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 *= arg2;
#define REPLACE_BINARY_MulAssign_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 *= arg2;
#define REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2;
#define REPLACE_BINARY_DivAssign_arg1_float_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 /= arg2;
#define REPLACE_BINARY_DivAssign_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 /= arg2;
#define REPLACE_BINARY_Assign_arg1_float_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 = arg2;
#define REPLACE_BINARY_Assign_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 = arg2;
#define REPLACE_BINARY_Add_arg1_double_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 + arg2;
#define REPLACE_BINARY_AddAssign_arg1_float_arg2_double(arg1, arg2, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 += arg2;
#define REPLACE_BINARY_ARG2(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_BINARY_ARG1(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(arg, 0);
  REPLACE_EXPR_NOT(arg, 1);
  REPLACE_EXPR_MINUS(arg, 2);
  REPLACE_EXPR_INT_ZERO(0, 3);
  REPLACE_EXPR_INT_ONE(1, 4);
  REPLACE_EXPR_INT_MINUS_ONE(-1, 5);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(arg, 0);
  REPLACE_EXPR_FLOAT_ZERO(0.0, 1);
  REPLACE_EXPR_FLOAT_ONE(1.0, 2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0, 3);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(float* arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) -= arg2);
  REPLACE_BINARY_AddAssign_arg1_float_arg2_double((*arg1), arg2, 0);
  REPLACE_BINARY_Assign_arg1_float_arg2_double((*arg1), arg2, 1);
  REPLACE_BINARY_DivAssign_arg1_float_arg2_double((*arg1), arg2, 2);
  REPLACE_BINARY_MulAssign_arg1_float_arg2_double((*arg1), arg2, 3);
  return MUTATION_RETURN((*arg1) -= arg2);
}

static double __dredd_replace_expr_double_lvalue(double* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC((*arg), 0);
  REPLACE_EXPR_DEC((*arg), 1);
  return MUTATION_RETURN((*arg));
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(arg, 0);
  REPLACE_EXPR_FLOAT_ZERO(0.0, 1);
  REPLACE_EXPR_FLOAT_ONE(1.0, 2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0, 3);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_binary_operator_Mul_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 * arg2);
  REPLACE_BINARY_Add_arg1_double_arg2_double(arg1, arg2, 0);
  REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2, 1);
  REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2, 2);
  REPLACE_BINARY_ARG1(arg1, 3);
  REPLACE_BINARY_ARG2(arg2, 4);
  return MUTATION_RETURN(arg1 * arg2);
}

static double __dredd_replace_binary_operator_Add_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2, 0);
  REPLACE_BINARY_Mul_arg1_double_arg2_double(arg1, arg2, 1);
  REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2, 2);
  REPLACE_BINARY_ARG1(arg1, 3);
  REPLACE_BINARY_ARG2(arg2, 4);
  return MUTATION_RETURN(arg1 + arg2);
}

static double __dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(double* arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) += arg2);
  REPLACE_BINARY_Assign_arg1_double_arg2_double((*arg1), arg2, 0);
  REPLACE_BINARY_DivAssign_arg1_double_arg2_double((*arg1), arg2, 1);
  REPLACE_BINARY_MulAssign_arg1_double_arg2_double((*arg1), arg2, 2);
  REPLACE_BINARY_SubAssign_arg1_double_arg2_double((*arg1), arg2, 3);
  return MUTATION_RETURN((*arg1) += arg2);
}

int main() {
  double a = __dredd_replace_expr_double(1.0, 0);
  double x = __dredd_replace_expr_double(5.32, 4);
  if (!__dredd_enabled_mutation(20)) { __dredd_replace_expr_double(__dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(&(x) , __dredd_replace_expr_double(0.5, 8), 12), 16); }
  float y = __dredd_replace_expr_float(__dredd_replace_expr_double(64343.7, 21), 25);
  if (!__dredd_enabled_mutation(41)) { __dredd_replace_expr_float(__dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(&(y) , __dredd_replace_expr_double(1.2, 29), 33), 37); }
  double z = __dredd_replace_expr_double(__dredd_replace_binary_operator_Mul_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(&(x), 42), 44) , __dredd_replace_expr_double(5.5, 48), 52), 57);
  if (!__dredd_enabled_mutation(88)) { return __dredd_replace_expr_int(__dredd_replace_expr_double(__dredd_replace_binary_operator_Add_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(&(z), 61), 63) , __dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(&(x), 67), 69), 73), 78), 82); }
}
