#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>

static bool __dredd_enabled_mutation(int local_mutation_id) {
  static bool initialized = false;
  static uint64_t enabled_bitset[1];
  if (!initialized) {
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 21) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

static float& __dredd_replace_binary_operator_SubAssign_float_double(std::function<float&()> arg1, std::function<double()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() += arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() = arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() /= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() *= arg2();
  return arg1() -= arg2();
}

static double& __dredd_replace_binary_operator_AddAssign_double_double(std::function<double&()> arg1, std::function<double()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() = arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() /= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() *= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() -= arg2();
  return arg1() += arg2();
}

static double __dredd_replace_binary_operator_Mul_double_double(std::function<double()> arg1, std::function<double()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() + arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() / arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() - arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg2();
  return arg1() * arg2();
}

static double __dredd_replace_binary_operator_Add_double_double(std::function<double()> arg1, std::function<double()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() / arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() * arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() - arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg2();
  return arg1() + arg2();
}

int main() {
  double x = 5.32;
  if (!__dredd_enabled_mutation(18)) { __dredd_replace_binary_operator_AddAssign_double_double([&]() -> double& { return static_cast<double&>(x); }, [&]() -> double { return static_cast<double>(0.5); }, 0); }
  float y = 64343.7;
  if (!__dredd_enabled_mutation(19)) { __dredd_replace_binary_operator_SubAssign_float_double([&]() -> float& { return static_cast<float&>(y); }, [&]() -> double { return static_cast<double>(1.2); }, 4); }
  double z = __dredd_replace_binary_operator_Mul_double_double([&]() -> double { return static_cast<double>(x); }, [&]() -> double { return static_cast<double>(5.5); }, 8);
  if (!__dredd_enabled_mutation(20)) { return __dredd_replace_binary_operator_Add_double_double([&]() -> double { return static_cast<double>(z); }, [&]() -> double { return static_cast<double>(x); }, 13); }
}
