#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 81) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_EXPR_FLOAT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0.0
#define REPLACE_EXPR_FLOAT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1.0
#define REPLACE_EXPR_FLOAT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1.0
#define REPLACE_BINARY_SubAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 -= arg2
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_MulAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 *= arg2
#define REPLACE_BINARY_Mul(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2
#define REPLACE_BINARY_DivAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 /= arg2
#define REPLACE_BINARY_Div(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 / arg2
#define REPLACE_BINARY_Assign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 = arg2
#define REPLACE_BINARY_AddAssign(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 += arg2
#define REPLACE_BINARY_Add(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 + arg2
#define REPLACE_BINARY_ARG2(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2
#define REPLACE_BINARY_ARG1(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define MUTATION_EXPR_INC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++(arg)
#define MUTATION_EXPR_DEC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  MUTATION_EXPR_NOT(1);
  MUTATION_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static float& __dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(float& arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 -= arg2);
  REPLACE_BINARY_AddAssign(0);
  REPLACE_BINARY_Assign(1);
  REPLACE_BINARY_DivAssign(2);
  REPLACE_BINARY_MulAssign(3);
  return MUTATION_RETURN(arg1 -= arg2);
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

static double& __dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(double& arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 += arg2);
  REPLACE_BINARY_Assign(0);
  REPLACE_BINARY_DivAssign(1);
  REPLACE_BINARY_MulAssign(2);
  REPLACE_BINARY_SubAssign(3);
  return MUTATION_RETURN(arg1 += arg2);
}

static double __dredd_replace_expr_double_lvalue(double& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_INC(0);
  MUTATION_EXPR_DEC(1);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_binary_operator_Mul_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 * arg2);
  REPLACE_BINARY_Add(0);
  REPLACE_BINARY_Div(1);
  REPLACE_BINARY_Sub(2);
  REPLACE_BINARY_ARG1(3);
  REPLACE_BINARY_ARG2(4);
  return MUTATION_RETURN(arg1 * arg2);
}

static double __dredd_replace_binary_operator_Add_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2);
  REPLACE_BINARY_Div(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Sub(2);
  REPLACE_BINARY_ARG1(3);
  REPLACE_BINARY_ARG2(4);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  double a = __dredd_replace_expr_double(1.0, 0);
  double x = __dredd_replace_expr_double(5.32, 4);
  if (!__dredd_enabled_mutation(16)) { __dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(x , __dredd_replace_expr_double(0.5, 8), 12); }
  float y = __dredd_replace_expr_float(__dredd_replace_expr_double(64343.7, 17), 21);
  if (!__dredd_enabled_mutation(33)) { __dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(y , __dredd_replace_expr_double(1.2, 25), 29); }
  double z = __dredd_replace_expr_double(__dredd_replace_binary_operator_Mul_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(x, 34), 36) , __dredd_replace_expr_double(5.5, 40), 44), 49);
  if (!__dredd_enabled_mutation(80)) { return __dredd_replace_expr_int(__dredd_replace_expr_double(__dredd_replace_binary_operator_Add_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(z, 53), 55) , __dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(x, 59), 61), 65), 70), 74); }
}
