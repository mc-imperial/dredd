#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
static thread_local unsigned long long int no_op = 0;

#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_LNOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INC(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_FLOAT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_DEC(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2) if (!(fabs((0.5 * (arg1)) - (0.5 * (arg2))) > (0.5 * std::numeric_limits<double>::max())) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_SubAssign_arg1_double_arg2_double(arg1, arg2) if (!(fabs((0.5 * (arg1)) - (0.5 * (arg2))) > (0.5 * std::numeric_limits<double>::max())) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_double_arg2_double(arg1, arg2) if (!(fabs((0x1.0p-100 * (arg1)) * (0x1.0p-924 * (arg2))) > (0x1.0p-100 * (0x1.0p-924 * std::numeric_limits<double>::max()))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_float_arg2_double(arg1, arg2) if (!(fabsf((0x1.0p-100f * (arg1)) * (0x1.0p-28f * (arg2))) > (0x1.0p-100f * (0x1.0p-28f * std::numeric_limits<float>::max()))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_double_arg2_double(arg1, arg2) if (!(fabs((0x1.0p-100 * (arg1)) * (0x1.0p-924 * (arg2))) > (0x1.0p-100 * (0x1.0p-924 * std::numeric_limits<double>::max()))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2) if (!((fabs((arg2)) < 1.0) && ((((arg2) == 0.0) || (fabs((0x1.0p-974 * (arg1)) / (0x1.0p100 * (arg2)))) > (0x1.0p-100 * (0x1.0p-974 * std::numeric_limits<double>::max()))))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_float_arg2_double(arg1, arg2) if (!((fabsf((arg2)) < 1.0f) && ((((arg2) == 0.0f) || (fabsf((0x1.0p-49f * (arg1)) / (0x1.0p100f * (arg2)))) > (0x1.0p-100f * (0x1.0p-49f * std::numeric_limits<float>::max()))))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_double_arg2_double(arg1, arg2) if (!((fabs((arg2)) < 1.0) && ((((arg2) == 0.0) || (fabs((0x1.0p-974 * (arg1)) / (0x1.0p100 * (arg2)))) > (0x1.0p-100 * (0x1.0p-974 * std::numeric_limits<double>::max()))))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_Assign_arg1_float_arg2_double(arg1, arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_Assign_arg1_double_arg2_double(arg1, arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_Add_arg1_double_arg2_double(arg1, arg2) if (!(fabs((0.5 * (arg1)) + (0.5 * (arg2))) > (0.5 * std::numeric_limits<double>::max())) && (arg1 + arg2) != actual_result) no_op++
#define REPLACE_BINARY_AddAssign_arg1_float_arg2_double(arg1, arg2) if (!(fabsf((0.5f * (arg1)) + (0.5f * (arg2))) > (0.5f * std::numeric_limits<float>::max())) && (arg1 + arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_LNOT(arg);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,float);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_FLOAT_ZERO(0.0);
  REPLACE_EXPR_FLOAT_ONE(1.0);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double_one(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,double);
  REPLACE_EXPR_FLOAT_ZERO(0.0);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double_lvalue(double& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,double);
  REPLACE_EXPR_INC(arg);
  REPLACE_EXPR_DEC(arg);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,double);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_FLOAT_ZERO(0.0);
  REPLACE_EXPR_FLOAT_ONE(1.0);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static float& __dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(float& arg1, double arg2, int local_mutation_id) {
  float arg1_original = arg1;
  MUTATION_PRELUDE(arg1 -= arg2,float&);
  REPLACE_BINARY_AddAssign_arg1_float_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_Assign_arg1_float_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_DivAssign_arg1_float_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_MulAssign_arg1_float_arg2_double(arg1_original, arg2);
  return MUTATION_RETURN(arg1_original -= arg2);
}

__attribute__((always_inline)) static double& __dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(double& arg1, double arg2, int local_mutation_id) {
  double arg1_original = arg1;
  MUTATION_PRELUDE(arg1 += arg2,double&);
  REPLACE_BINARY_Assign_arg1_double_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_DivAssign_arg1_double_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_MulAssign_arg1_double_arg2_double(arg1_original, arg2);
  REPLACE_BINARY_SubAssign_arg1_double_arg2_double(arg1_original, arg2);
  return MUTATION_RETURN(arg1_original += arg2);
}

__attribute__((always_inline)) static double __dredd_replace_binary_operator_Mul_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 * arg2,double);
  REPLACE_BINARY_Add_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 * arg2);
}

__attribute__((always_inline)) static double __dredd_replace_binary_operator_Add_arg1_double_arg2_double(double arg1, double arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,double);
  REPLACE_BINARY_Div_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_Mul_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_double_arg2_double(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  double a = __dredd_replace_expr_double_one(1.0, 0);
  double x = __dredd_replace_expr_double(5.32, 2);
  __dredd_replace_binary_operator_AddAssign_arg1_double_arg2_double(x , __dredd_replace_expr_double(0.5, 6), 10);
  float y = __dredd_replace_expr_float(64343.7, 15);
  __dredd_replace_binary_operator_SubAssign_arg1_float_arg2_double(y , __dredd_replace_expr_double(1.2, 19), 23);
  double z = __dredd_replace_expr_double(__dredd_replace_binary_operator_Mul_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(x, 28), 30) , __dredd_replace_expr_double(5.5, 34), 38), 43);
  return __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_double_arg2_double(__dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(z, 47), 49) , __dredd_replace_expr_double(__dredd_replace_expr_double_lvalue(x, 53), 55), 59), 64);
}
