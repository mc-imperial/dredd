#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 53) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

static int __dredd_replace_expr_int_zero(int arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return -1;
  return arg;
}

static int __dredd_replace_expr_int_lvalue(int& arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return ++(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return --(arg);
  return arg;
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return -(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return -1;
  return arg;
}

static int __dredd_replace_binary_operator_Div_int_int(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 / arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 + arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 * arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 % arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1 - arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg2;
  return arg1 / arg2;
}

static bool __dredd_replace_expr_bool_omit_false(bool arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return true;
  return arg;
}

static bool __dredd_replace_expr_bool_before_logical_operator_argument(bool arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return true;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return false;
  return arg;
}

static bool __dredd_replace_binary_operator_NE_int_int_rhs_zero(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 != arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 > arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 < arg2;
  return arg1 != arg2;
}

static bool __dredd_replace_binary_operator_LAnd_bool_bool(bool arg1, std::function<bool()> arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 && arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 == arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg2();
  return arg1 && arg2();
}

int foo(int a, int b) {
  if (!__dredd_enabled_mutation(52)) { return __dredd_replace_expr_int(__dredd_replace_binary_operator_LAnd_bool_bool((__dredd_replace_expr_bool_omit_false(__dredd_replace_binary_operator_NE_int_int_rhs_zero(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(b, 0), 2) , __dredd_replace_expr_int_zero(0, 8), 10), 12)) , [&]() -> bool { return static_cast<bool>(__dredd_replace_expr_bool_before_logical_operator_argument((__dredd_replace_expr_int(__dredd_replace_binary_operator_Div_int_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(a, 13), 15) , __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(b, 21), 23), 29), 35)), 41)); }, 43), 46); }
}
