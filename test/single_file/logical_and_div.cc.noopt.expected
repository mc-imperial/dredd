#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 79) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_EXPR_TRUE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return true
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_EXPR_FALSE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return false
#define REPLACE_BINARY_Sub(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 - arg2
#define REPLACE_BINARY_Rem(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 % arg2
#define REPLACE_BINARY_NE_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 != arg2()
#define REPLACE_BINARY_Mul(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 * arg2
#define REPLACE_BINARY_LT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 < arg2
#define REPLACE_BINARY_LOr_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 || arg2()
#define REPLACE_BINARY_LE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 <= arg2
#define REPLACE_BINARY_GT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 > arg2
#define REPLACE_BINARY_GE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 >= arg2
#define REPLACE_BINARY_EQ_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 == arg2()
#define REPLACE_BINARY_EQ(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 == arg2
#define REPLACE_BINARY_Add(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 + arg2
#define REPLACE_BINARY_ARG2_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2()
#define REPLACE_BINARY_ARG2(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2
#define REPLACE_BINARY_ARG1(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define MUTATION_EXPR_INC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++(arg)
#define MUTATION_EXPR_DEC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_expr_int_lvalue(int& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_INC(0);
  MUTATION_EXPR_DEC(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  MUTATION_EXPR_NOT(1);
  MUTATION_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_Div_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 / arg2);
  REPLACE_BINARY_Add(0);
  REPLACE_BINARY_Mul(1);
  REPLACE_BINARY_Rem(2);
  REPLACE_BINARY_Sub(3);
  REPLACE_BINARY_ARG1(4);
  REPLACE_BINARY_ARG2(5);
  return MUTATION_RETURN(arg1 / arg2);
}

static bool __dredd_replace_expr_bool(bool arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  REPLACE_EXPR_TRUE(1);
  REPLACE_EXPR_FALSE(2);
  return MUTATION_RETURN(arg);
}

static bool __dredd_replace_binary_operator_NE_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 != arg2);
  REPLACE_BINARY_EQ(0);
  REPLACE_BINARY_GE(1);
  REPLACE_BINARY_GT(2);
  REPLACE_BINARY_LE(3);
  REPLACE_BINARY_LT(4);
  REPLACE_BINARY_ARG1(5);
  REPLACE_BINARY_ARG2(6);
  return MUTATION_RETURN(arg1 != arg2);
}

static bool __dredd_replace_binary_operator_LAnd_arg1_bool_arg2_bool(bool arg1, std::function<bool()> arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 && arg2());
  REPLACE_BINARY_LOr_RHS_EVALUATED(0);
  REPLACE_BINARY_EQ_RHS_EVALUATED(1);
  REPLACE_BINARY_NE_RHS_EVALUATED(2);
  REPLACE_BINARY_ARG1(3);
  REPLACE_BINARY_ARG2_EVALUATED(4);
  return MUTATION_RETURN(arg1 && arg2());
}

int foo(int a, int b) {
  if (!__dredd_enabled_mutation(78)) { return __dredd_replace_expr_int(__dredd_replace_expr_bool(__dredd_replace_binary_operator_LAnd_arg1_bool_arg2_bool(__dredd_replace_expr_bool((__dredd_replace_expr_bool(__dredd_replace_binary_operator_NE_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(b, 0), 2) , __dredd_replace_expr_int(0, 8), 14), 21)), 24) , [&]() -> bool { return static_cast<bool>(__dredd_replace_expr_bool(__dredd_replace_expr_int((__dredd_replace_expr_int(__dredd_replace_binary_operator_Div_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(a, 27), 29) , __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(b, 35), 37), 43), 49)), 55), 61)); }, 64), 69), 72); }
}
