#include <inttypes.h>
#include <stdlib.h>
#include <string.h>
static int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static int initialized = 0;
  static uint64_t enabled_bitset[2];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 128) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return -1;
  return arg;
}

static int __dredd_replace_binary_operator_NE_int_int(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 != arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 == arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 >= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 > arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1 <= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1 < arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return !(arg1 != arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return ~(arg1 != arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 10)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 11)) return -1;
  return arg1 != arg2;
}

static int __dredd_replace_binary_operator_EQ_int_int(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 == arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 >= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 > arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 <= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1 < arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1 != arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return !(arg1 == arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return ~(arg1 == arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 10)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 11)) return -1;
  return arg1 == arg2;
}

static int __dredd_replace_binary_operator_Div_int_int(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 / arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 + arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 * arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 % arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1 - arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return !(arg1 / arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return ~(arg1 / arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 10)) return -1;
  return arg1 / arg2;
}

static int __dredd_replace_binary_operator_Assign_int_int(int* arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return (*arg1) = arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return (*arg1) += arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return (*arg1) &= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return (*arg1) /= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return (*arg1) *= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return (*arg1) |= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return (*arg1) %= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return (*arg1) <<= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return (*arg1) >>= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return (*arg1) -= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return (*arg1) ^= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 10)) return !((*arg1) = arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 11)) return ~((*arg1) = arg2);
  if (__dredd_enabled_mutation(local_mutation_id + 12)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 13)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 14)) return -1;
  return (*arg1) = arg2;
}

void foo(int a, int b) {
  int x;
  if (!__dredd_enabled_mutation(126)) { __dredd_replace_binary_operator_Assign_int_int(&(x) , __dredd_replace_expr_int(__dredd_replace_binary_operator_EQ_int_int(__dredd_replace_expr_int(b, 0) , __dredd_replace_expr_int(0, 5), 10) || __dredd_replace_binary_operator_Div_int_int(__dredd_replace_expr_int(a, 22) , __dredd_replace_expr_int(b, 27), 32), 43), 48); }
  int y;
  if (!__dredd_enabled_mutation(127)) { __dredd_replace_binary_operator_Assign_int_int(&(y) , __dredd_replace_expr_int(__dredd_replace_binary_operator_NE_int_int(__dredd_replace_expr_int(b, 63) , __dredd_replace_expr_int(0, 68), 73) && __dredd_replace_binary_operator_Div_int_int(__dredd_replace_expr_int(a, 85) , __dredd_replace_expr_int(b, 90), 95), 106), 111); }
}
