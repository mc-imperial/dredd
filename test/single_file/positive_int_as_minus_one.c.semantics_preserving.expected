static unsigned long long int no_op = 0;

#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

#include <limits.h>
#include <float.h>
#include <math.h>
#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_LNOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INC(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_DEC(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_Rem_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2) if ((arg2) != 0 && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2) if (((unsigned long long)arg1 * (unsigned long long)arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2) if ((arg2 != 0) &&(arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_Add_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2) if ((arg1 + arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static unsigned int __dredd_replace_expr_unsigned_int_lvalue(unsigned int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg),unsigned int);
  REPLACE_EXPR_INC((*arg));
  REPLACE_EXPR_DEC((*arg));
  return MUTATION_RETURN((*arg));
}

static unsigned int __dredd_replace_expr_unsigned_int_constant(unsigned int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,unsigned int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  return MUTATION_RETURN(arg);
}

static unsigned int __dredd_replace_expr_unsigned_int(unsigned int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,unsigned int);
  REPLACE_EXPR_LNOT(arg);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_LNOT(arg);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static unsigned int __dredd_replace_binary_operator_Sub_arg1_unsigned_int_arg2_unsigned_int(unsigned int arg1, unsigned int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 - arg2,unsigned int);
  REPLACE_BINARY_Add_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2);
  REPLACE_BINARY_Div_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2);
  REPLACE_BINARY_Mul_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2);
  REPLACE_BINARY_Rem_arg1_unsigned_int_arg2_unsigned_int(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 - arg2);
}

int main() {
  unsigned int x = __dredd_replace_expr_unsigned_int_constant(4294967295, 0);
  int y = __dredd_replace_expr_int(__dredd_replace_binary_operator_Sub_arg1_unsigned_int_arg2_unsigned_int(__dredd_replace_expr_unsigned_int(__dredd_replace_expr_unsigned_int_lvalue(&(x), 3), 5) , __dredd_replace_expr_unsigned_int_constant(20, 9), 12), 18);
}
