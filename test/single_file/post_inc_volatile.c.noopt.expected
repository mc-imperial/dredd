#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 72) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

static int __dredd_replace_unary_operator_PostInc_volatile_int(volatile int* arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return (*arg)++;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return (*arg)--;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~(*arg);
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return -(*arg);
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return !(*arg);
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return (*arg);
  return (*arg)++;
}

static int __dredd_replace_expr_int_lvalue(int* arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return (*arg);
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return ++((*arg));
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return --((*arg));
  return (*arg);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return -(arg);
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return -1;
  return arg;
}

static int __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int* arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return (*arg1) = arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return (*arg1) += arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return (*arg1) &= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return (*arg1) /= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return (*arg1) *= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return (*arg1) |= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return (*arg1) %= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return (*arg1) <<= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return (*arg1) >>= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return (*arg1) -= arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return (*arg1) ^= arg2;
  return (*arg1) = arg2;
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1 + arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1 / arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1 * arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1 % arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1 - arg2;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg2;
  return arg1 + arg2;
}

int main() {
  volatile int x = __dredd_replace_expr_int(9, 0);
  volatile int y = __dredd_replace_expr_int(43, 6);
  int z;
  if (!__dredd_enabled_mutation(62)) { __dredd_replace_expr_int(__dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(z) , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_unary_operator_PostInc_volatile_int(&(x), 12), 17) , __dredd_replace_expr_int(__dredd_replace_unary_operator_PostInc_volatile_int(&(y), 23), 28), 34), 40), 46), 56); }
  if (!__dredd_enabled_mutation(71)) { return __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(z), 63), 65); }
}
