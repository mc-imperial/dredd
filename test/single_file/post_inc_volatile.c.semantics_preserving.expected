static unsigned long long int no_op = 0;

#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

#include <limits.h>
#include <float.h>
#include <math.h>
#define MUTATION_RETURN(arg) actual_result
#define REPLACE_UNARY_PostDec_int(arg) if ((arg) != INT_MIN && (arg - 1) != actual_result) no_op++
#define REPLACE_UNARY_Not_int(arg) if ((arg) != actual_result) no_op++
#define REPLACE_UNARY_Minus_int(arg) if ((arg) != INT_MIN && (arg) != actual_result) no_op++
#define REPLACE_UNARY_LNot_int(arg) if ((arg) != actual_result) no_op++
#define REPLACE_UNARY_ARG_int(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_LNOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INC(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_DEC(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_XorAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 ^ arg2) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)^(arg2)) & ((((arg1) ^ (((arg1)^(arg2)) & (~INT_MAX)))-(arg2))^(arg2))) < 0) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_SubAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)^(arg2)) & ((((arg1) ^ (((arg1)^(arg2)) & (~INT_MAX)))-(arg2))^(arg2))) < 0) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShrAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg1) < 0) || ((arg2) < 0) || ((arg2) >= 32)) && (arg1 >> arg2) != actual_result) no_op++
#define REPLACE_BINARY_ShlAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg1) < 0) || ((arg2) < 0) || ((arg2) >= 32) || ((arg1) > (INT_MAX >> (arg2)))) && (arg1 << arg2) != actual_result) no_op++
#define REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == INT_MIN) && ((arg2) == (-1)))) && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_RemAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == INT_MIN) && ((arg2) == (-1)))) && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_OrAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 | arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_int_arg2_int(arg1, arg2) if (!((((arg1) > 0) && ((arg2) > 0) && ((arg1) > (INT_MAX / (arg2)))) || (((arg1) > 0) && ((arg2) <= 0) && ((arg2) < (INT_MIN / (arg1)))) || (((arg1) <= 0) && ((arg2) > 0) && ((arg1) < (INT_MIN / (arg2)))) || (((arg1) <= 0) && ((arg2) <= 0) && ((arg1) != 0) && ((arg2) < (INT_MAX / (arg1))))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_MulAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1) > 0) && ((arg2) > 0) && ((arg1) > (INT_MAX / (arg2)))) || (((arg1) > 0) && ((arg2) <= 0) && ((arg2) < (INT_MIN / (arg1)))) || (((arg1) <= 0) && ((arg2) > 0) && ((arg1) < (INT_MIN / (arg2)))) || (((arg1) <= 0) && ((arg2) <= 0) && ((arg1) != 0) && ((arg2) < (INT_MAX / (arg1))))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == INT_MIN) && ((arg2) == (-1)))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_DivAssign_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == INT_MIN) && ((arg2) == (-1)))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_AndAssign_arg1_int_arg2_int(arg1, arg2) if ((arg1 & arg2) != actual_result) no_op++
#define REPLACE_BINARY_AddAssign_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)>0) && ((arg2)>0) && ((arg1) > (INT_MAX-(arg2)))) || (((arg1)<0) && ((arg2)<0) && ((arg1) < (INT_MIN-(arg2))))) && (arg1 + arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int_lvalue(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg),int);
  REPLACE_EXPR_INC((*arg));
  REPLACE_EXPR_DEC((*arg));
  return MUTATION_RETURN((*arg));
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_LNOT(arg);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static int __dredd_replace_unary_operator_PostInc_volatile_int(volatile int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg)++,int);
  REPLACE_UNARY_PostDec_int((*arg));
  REPLACE_UNARY_Not_int((*arg));
  REPLACE_UNARY_Minus_int((*arg));
  REPLACE_UNARY_LNot_int((*arg));
  REPLACE_UNARY_ARG_int((*arg));
  return MUTATION_RETURN((*arg)++);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int* arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE((*arg1) = arg2,int);
  REPLACE_BINARY_AddAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_AndAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_DivAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_MulAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_OrAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_RemAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_ShlAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_ShrAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_SubAssign_arg1_int_arg2_int((*arg1), arg2);
  REPLACE_BINARY_XorAssign_arg1_int_arg2_int((*arg1), arg2);
  return MUTATION_RETURN((*arg1) = arg2);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(int arg1, int arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 + arg2,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Mul_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2);
  REPLACE_BINARY_ARG1(arg1);
  REPLACE_BINARY_ARG2(arg2);
  return MUTATION_RETURN(arg1 + arg2);
}

int main() {
  volatile int x = __dredd_replace_expr_int_constant(9, 0);
  volatile int y = __dredd_replace_expr_int_constant(43, 5);
  int z;
  __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(&(z) , __dredd_replace_expr_int(__dredd_replace_binary_operator_Add_arg1_int_arg2_int(__dredd_replace_expr_int(__dredd_replace_unary_operator_PostInc_volatile_int(&(x), 10), 15) , __dredd_replace_expr_int(__dredd_replace_unary_operator_PostInc_volatile_int(&(y), 21), 26), 32), 38), 44);
  return __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(z), 55), 57);
}
