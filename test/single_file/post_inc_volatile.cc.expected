#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 64) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_UNARY_PostDec_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg()--
#define REPLACE_UNARY_Not_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~arg()
#define REPLACE_UNARY_Minus_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -arg()
#define REPLACE_UNARY_LNot_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !arg()
#define REPLACE_UNARY_ARG_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg()
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_BINARY_XorAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 ^= arg2()
#define REPLACE_BINARY_Sub_LHS_EVALUATED_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1() - arg2()
#define REPLACE_BINARY_SubAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 -= arg2()
#define REPLACE_BINARY_ShrAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 >>= arg2()
#define REPLACE_BINARY_ShlAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 <<= arg2()
#define REPLACE_BINARY_Rem_LHS_EVALUATED_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1() % arg2()
#define REPLACE_BINARY_RemAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 %= arg2()
#define REPLACE_BINARY_OrAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 |= arg2()
#define REPLACE_BINARY_Mul_LHS_EVALUATED_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1() * arg2()
#define REPLACE_BINARY_MulAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 *= arg2()
#define REPLACE_BINARY_Div_LHS_EVALUATED_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1() / arg2()
#define REPLACE_BINARY_DivAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 /= arg2()
#define REPLACE_BINARY_AndAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 &= arg2()
#define REPLACE_BINARY_AddAssign_RHS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1 += arg2()
#define REPLACE_BINARY_ARG2_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg2()
#define REPLACE_BINARY_ARG1_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg1()
#define MUTATION_EXPR_NOT_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg())
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg())
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_EXPR_LNOT_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg())
#define MUTATION_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define MUTATION_EXPR_INC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++(arg)
#define MUTATION_EXPR_DEC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int& __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(int& arg1, std::function<int()> arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1 = arg2());
  REPLACE_BINARY_AddAssign_RHS_EVALUATED(0);
  REPLACE_BINARY_AndAssign_RHS_EVALUATED(1);
  REPLACE_BINARY_DivAssign_RHS_EVALUATED(2);
  REPLACE_BINARY_MulAssign_RHS_EVALUATED(3);
  REPLACE_BINARY_OrAssign_RHS_EVALUATED(4);
  REPLACE_BINARY_RemAssign_RHS_EVALUATED(5);
  REPLACE_BINARY_ShlAssign_RHS_EVALUATED(6);
  REPLACE_BINARY_ShrAssign_RHS_EVALUATED(7);
  REPLACE_BINARY_SubAssign_RHS_EVALUATED(8);
  REPLACE_BINARY_XorAssign_RHS_EVALUATED(9);
  return MUTATION_RETURN(arg1 = arg2());
}

static int __dredd_replace_unary_operator_PostInc_volatile_int(std::function<volatile int&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg()++);
  REPLACE_UNARY_PostDec_EVALUATED(0);
  REPLACE_UNARY_Not_EVALUATED(1);
  REPLACE_UNARY_Minus_EVALUATED(2);
  REPLACE_UNARY_LNot_EVALUATED(3);
  REPLACE_UNARY_ARG_EVALUATED(4);
  return MUTATION_RETURN(arg()++);
}

static int __dredd_replace_expr_int_lvalue(int& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_INC(0);
  MUTATION_EXPR_DEC(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_NOT(0);
  MUTATION_EXPR_MINUS(1);
  REPLACE_EXPR_INT_ZERO(2);
  REPLACE_EXPR_INT_ONE(3);
  REPLACE_EXPR_INT_MINUS_ONE(4);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(std::function<int()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg());
  MUTATION_EXPR_LNOT_EVALUATED(0);
  MUTATION_EXPR_NOT_EVALUATED(1);
  MUTATION_EXPR_MINUS_EVALUATED(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg());
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_LNOT(0);
  MUTATION_EXPR_NOT(1);
  MUTATION_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(std::function<int()> arg1, std::function<int()> arg2, int local_mutation_id) {
  MUTATION_PRELUDE(arg1() + arg2());
  REPLACE_BINARY_Div_LHS_EVALUATED_RHS_EVALUATED(0);
  REPLACE_BINARY_Mul_LHS_EVALUATED_RHS_EVALUATED(1);
  REPLACE_BINARY_Rem_LHS_EVALUATED_RHS_EVALUATED(2);
  REPLACE_BINARY_Sub_LHS_EVALUATED_RHS_EVALUATED(3);
  REPLACE_BINARY_ARG1_EVALUATED(4);
  REPLACE_BINARY_ARG2_EVALUATED(5);
  return MUTATION_RETURN(arg1() + arg2());
}

int main() {
  volatile int x = __dredd_replace_expr_int_constant(9, 0);
  volatile int y = __dredd_replace_expr_int_constant(43, 5);
  int z;
  if (!__dredd_enabled_mutation(54)) { __dredd_replace_binary_operator_Assign_arg1_int_arg2_int(z , [&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_binary_operator_Add_arg1_int_arg2_int([&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int([&]() -> volatile int& { return static_cast<volatile int&>(x); }, 10)); }, 15)); } , [&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int([&]() -> volatile int& { return static_cast<volatile int&>(y); }, 21)); }, 26)); }, 32)); }, 38)); }, 44); }
  if (!__dredd_enabled_mutation(63)) { return __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(z, 55), 57); }
}
