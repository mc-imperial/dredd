#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>

static bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static bool initialized = false;
  static uint64_t enabled_bitset[1];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 62) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

static int& __dredd_replace_binary_operator_Assign_int_int(std::function<int&()> arg1, std::function<int()> arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1() = arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() += arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() &= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() /= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() *= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1() |= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg1() %= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return arg1() <<= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return arg1() >>= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return arg1() -= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return arg1() ^= arg2();
  return arg1() = arg2();
}

static int __dredd_replace_unary_operator_PostInc_volatile_int(std::function<volatile int&()> arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg()++;
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg()--;
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~arg();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return -arg();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return !arg();
  return arg()++;
}

static int __dredd_replace_expr_int_lvalue(std::function<int&()> arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return ++(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return --(arg());
  return arg();
}

static int __dredd_replace_expr_int_constant(std::function<int()> arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return ~(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return -(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return -1;
  return arg();
}

static int __dredd_replace_expr_int(std::function<int()> arg, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return !(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return ~(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return -(arg());
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return 0;
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return 1;
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return -1;
  return arg();
}

static int __dredd_replace_binary_operator_Add_int_int(std::function<int()> arg1, std::function<int()> arg2, int local_mutation_id) {
  if (!__dredd_some_mutation_enabled) return arg1() + arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() / arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() * arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() % arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() - arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1();
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg2();
  return arg1() + arg2();
}

int main() {
  volatile int x = __dredd_replace_expr_int_constant([&]() -> int { return 9; }, 0);
  volatile int y = __dredd_replace_expr_int_constant([&]() -> int { return 43; }, 5);
  int z;
  if (!__dredd_enabled_mutation(52)) { __dredd_replace_binary_operator_Assign_int_int([&]() -> int& { return static_cast<int&>(z); } , [&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_binary_operator_Add_int_int([&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int([&]() -> volatile int& { return static_cast<volatile int&>(x); }, 10)); }, 14)); } , [&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int([&]() -> volatile int& { return static_cast<volatile int&>(y); }, 20)); }, 24)); }, 30)); }, 36)); }, 42); }
  if (!__dredd_enabled_mutation(61)) { return __dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_expr_int_lvalue([&]() -> int& { return static_cast<int&>(z); }, 53)); }, 55); }
}
