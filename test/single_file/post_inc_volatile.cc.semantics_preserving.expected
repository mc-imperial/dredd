#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
static thread_local unsigned long long int no_op = 0;

#define MUTATION_RETURN(arg) actual_result
#define REPLACE_UNARY_PostDec_int(arg) if ((arg) != std::numeric_limits<int>::lowest() && (arg - 1) != actual_result) no_op++
#define REPLACE_UNARY_Not_int(arg) if ((arg) != actual_result) no_op++
#define REPLACE_UNARY_Minus_int(arg) if ((arg) != std::numeric_limits<int>::lowest() && (arg) != actual_result) no_op++
#define REPLACE_UNARY_LNot_int(arg) if ((arg) != actual_result) no_op++
#define REPLACE_UNARY_ARG_int(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_LNOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INC(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_DEC(args) if ((args) != actual_result) no_op++
#define REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1, arg2) if (!((((arg1)^(arg2)) & ((((arg1) ^ (((arg1)^(arg2)) & (~std::numeric_limits<int>::max())))-(arg2))^(arg2))) < 0) && (arg1 - arg2) != actual_result) no_op++
#define REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 % arg2) != actual_result) no_op++
#define REPLACE_BINARY_Mul_arg1_int_arg2_int(arg1, arg2) if (!((((arg1) > 0) && ((arg2) > 0) && ((arg1) > (std::numeric_limits<int>::max() / (arg2)))) || (((arg1) > 0) && ((arg2) <= 0) && ((arg2) < (std::numeric_limits<int>::lowest() / (arg1)))) || (((arg1) <= 0) && ((arg2) > 0) && ((arg1) < (std::numeric_limits<int>::lowest() / (arg2)))) || (((arg1) <= 0) && ((arg2) <= 0) && ((arg1) != 0) && ((arg2) < (std::numeric_limits<int>::max() / (arg1))))) && (arg1 * arg2) != actual_result) no_op++
#define REPLACE_BINARY_Div_arg1_int_arg2_int(arg1, arg2) if (!(((arg2) == 0) || (((arg1) == std::numeric_limits<int>::lowest()) && ((arg2) == (-1)))) && (arg1 / arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG2(arg2) if ((arg2) != actual_result) no_op++
#define REPLACE_BINARY_ARG1(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int_lvalue(int& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_INC(arg);
  REPLACE_EXPR_DEC(arg);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(std::function<int()> arg, int local_mutation_id) {
  int arg_evaluated = arg();
  MUTATION_PRELUDE(arg_evaluated,int);
  REPLACE_EXPR_LNOT(arg_evaluated);
  REPLACE_EXPR_NOT(arg_evaluated);
  REPLACE_EXPR_MINUS(arg_evaluated);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg_evaluated);
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_LNOT(arg);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

__attribute__((always_inline)) static int __dredd_replace_unary_operator_PostInc_volatile_int(volatile int& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg++,int);
  REPLACE_UNARY_PostDec_int(arg);
  REPLACE_UNARY_Not_int(arg);
  REPLACE_UNARY_Minus_int(arg);
  REPLACE_UNARY_LNot_int(arg);
  REPLACE_UNARY_ARG_int(arg);
  return MUTATION_RETURN(arg++);
}

__attribute__((always_inline)) static int __dredd_replace_binary_operator_Add_arg1_int_arg2_int(std::function<int()> arg1, std::function<int()> arg2, int local_mutation_id) {
  int arg1_evaluated = arg1();
  int arg2_evaluated = arg2();
  MUTATION_PRELUDE(arg1_evaluated + arg2_evaluated,int);
  REPLACE_BINARY_Div_arg1_int_arg2_int(arg1_evaluated, arg2_evaluated);
  REPLACE_BINARY_Mul_arg1_int_arg2_int(arg1_evaluated, arg2_evaluated);
  REPLACE_BINARY_Rem_arg1_int_arg2_int(arg1_evaluated, arg2_evaluated);
  REPLACE_BINARY_Sub_arg1_int_arg2_int(arg1_evaluated, arg2_evaluated);
  REPLACE_BINARY_ARG1(arg1_evaluated);
  REPLACE_BINARY_ARG2(arg2_evaluated);
  return MUTATION_RETURN(arg1_evaluated + arg2_evaluated);
}

int main() {
  volatile int x = __dredd_replace_expr_int_constant(9, 0);
  volatile int y = __dredd_replace_expr_int_constant(43, 5);
  int z;
  z = __dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_binary_operator_Add_arg1_int_arg2_int([&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int(x, 10)); }, 15)); } , [&]() -> int { return static_cast<int>(__dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_volatile_int(y, 21)); }, 26)); }, 32)); }, 38);
  return __dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(z, 45), 47);
}
