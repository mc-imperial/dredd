#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

#include <limits>
#include <cmath>
static thread_local unsigned long long int no_op = 0;

#define MUTATION_RETURN(arg) actual_result
#define REPLACE_EXPR_NOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_MINUS(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_LNOT(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ZERO(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_ONE(args) if ((args) != actual_result) no_op++
#define REPLACE_EXPR_INT_MINUS_ONE(args) if ((args) != actual_result) no_op++
#define MUTATION_PRELUDE(arg,type) type actual_result = (arg)
static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg,int);
  REPLACE_EXPR_NOT(arg);
  REPLACE_EXPR_MINUS(arg);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(std::function<int()> arg, int local_mutation_id) {
  int arg_evaluated = arg();
  MUTATION_PRELUDE(arg_evaluated,int);
  REPLACE_EXPR_LNOT(arg_evaluated);
  REPLACE_EXPR_NOT(arg_evaluated);
  REPLACE_EXPR_MINUS(arg_evaluated);
  REPLACE_EXPR_INT_ZERO(0);
  REPLACE_EXPR_INT_ONE(1);
  REPLACE_EXPR_INT_MINUS_ONE(-1);
  return MUTATION_RETURN(arg_evaluated);
}

template<typename T>
T foo(T a) {
  return a + __dredd_replace_expr_int_constant(2, 0);
}

void foo() {
  int x;
  x = __dredd_replace_expr_int([&]() -> int { return static_cast<int>(foo(__dredd_replace_expr_int_constant(3, 6))); }, 11);
}
