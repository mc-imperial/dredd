#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 116) {
          enabled_bitset[local_value / 64] |= ((uint64_t) 1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & ((uint64_t) 1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_UNARY_PreInc(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_PreDec(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_PostInc(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_PostDec(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_Not(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_Minus(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_LNot(arg, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg;
#define REPLACE_UNARY_ARG(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_NOT(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_MINUS(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_LNOT(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ZERO(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INT_MINUS_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_INC(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_ZERO(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_FLOAT_MINUS_ONE(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define REPLACE_EXPR_DEC(args, mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return args
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int __dredd_replace_unary_operator_PreInc_int(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE(++(*arg));
  REPLACE_UNARY_PreDec((*arg), 0);
  REPLACE_UNARY_Not((*arg), 1);
  REPLACE_UNARY_Minus((*arg), 2);
  REPLACE_UNARY_LNot((*arg), 3);
  REPLACE_UNARY_ARG((*arg), 4);
  return MUTATION_RETURN(++(*arg));
}

static int __dredd_replace_unary_operator_PreDec_int(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE(--(*arg));
  REPLACE_UNARY_PreInc((*arg), 0);
  REPLACE_UNARY_Not((*arg), 1);
  REPLACE_UNARY_Minus((*arg), 2);
  REPLACE_UNARY_LNot((*arg), 3);
  REPLACE_UNARY_ARG((*arg), 4);
  return MUTATION_RETURN(--(*arg));
}

static int __dredd_replace_unary_operator_PostInc_int(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg)++);
  REPLACE_UNARY_PostDec((*arg), 0);
  REPLACE_UNARY_Not((*arg), 1);
  REPLACE_UNARY_Minus((*arg), 2);
  REPLACE_UNARY_LNot((*arg), 3);
  REPLACE_UNARY_ARG((*arg), 4);
  return MUTATION_RETURN((*arg)++);
}

static int __dredd_replace_unary_operator_PostDec_int(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg)--);
  REPLACE_UNARY_PostInc((*arg), 0);
  REPLACE_UNARY_Not((*arg), 1);
  REPLACE_UNARY_Minus((*arg), 2);
  REPLACE_UNARY_LNot((*arg), 3);
  REPLACE_UNARY_ARG((*arg), 4);
  return MUTATION_RETURN((*arg)--);
}

static int __dredd_replace_unary_operator_Minus_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(-arg);
  REPLACE_UNARY_Not(arg, 0);
  REPLACE_UNARY_LNot(arg, 1);
  REPLACE_UNARY_ARG(arg, 2);
  return MUTATION_RETURN(-arg);
}

static int __dredd_replace_expr_int_lvalue(int* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg));
  REPLACE_EXPR_INC((*arg), 0);
  REPLACE_EXPR_DEC((*arg), 1);
  return MUTATION_RETURN((*arg));
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(arg, 0);
  REPLACE_EXPR_NOT(arg, 1);
  REPLACE_EXPR_MINUS(arg, 2);
  REPLACE_EXPR_INT_ZERO(0, 3);
  REPLACE_EXPR_INT_ONE(1, 4);
  REPLACE_EXPR_INT_MINUS_ONE(-1, 5);
  return MUTATION_RETURN(arg);
}

static float __dredd_replace_unary_operator_PreInc_float(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE(++(*arg));
  REPLACE_UNARY_PreDec((*arg), 0);
  REPLACE_UNARY_Minus((*arg), 1);
  REPLACE_UNARY_LNot((*arg), 2);
  REPLACE_UNARY_ARG((*arg), 3);
  return MUTATION_RETURN(++(*arg));
}

static float __dredd_replace_unary_operator_PreDec_float(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE(--(*arg));
  REPLACE_UNARY_PreInc((*arg), 0);
  REPLACE_UNARY_Minus((*arg), 1);
  REPLACE_UNARY_LNot((*arg), 2);
  REPLACE_UNARY_ARG((*arg), 3);
  return MUTATION_RETURN(--(*arg));
}

static float __dredd_replace_unary_operator_PostInc_float(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg)++);
  REPLACE_UNARY_PostDec((*arg), 0);
  REPLACE_UNARY_Minus((*arg), 1);
  REPLACE_UNARY_LNot((*arg), 2);
  REPLACE_UNARY_ARG((*arg), 3);
  return MUTATION_RETURN((*arg)++);
}

static float __dredd_replace_unary_operator_PostDec_float(float* arg, int local_mutation_id) {
  MUTATION_PRELUDE((*arg)--);
  REPLACE_UNARY_PostInc((*arg), 0);
  REPLACE_UNARY_Minus((*arg), 1);
  REPLACE_UNARY_LNot((*arg), 2);
  REPLACE_UNARY_ARG((*arg), 3);
  return MUTATION_RETURN((*arg)--);
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(arg, 0);
  REPLACE_EXPR_FLOAT_ZERO(0.0, 1);
  REPLACE_EXPR_FLOAT_ONE(1.0, 2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0, 3);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(arg, 0);
  REPLACE_EXPR_FLOAT_ZERO(0.0, 1);
  REPLACE_EXPR_FLOAT_ONE(1.0, 2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(-1.0, 3);
  return MUTATION_RETURN(arg);
}

int main() {
  int x = __dredd_replace_expr_int(3, 0);
  float y = __dredd_replace_expr_float(__dredd_replace_expr_double(3.532, 6), 10);
  if (!__dredd_enabled_mutation(25)) { __dredd_replace_expr_int(__dredd_replace_unary_operator_PostInc_int(&(x), 14), 19); }
  if (!__dredd_enabled_mutation(34)) { __dredd_replace_expr_float(__dredd_replace_unary_operator_PostInc_float(&(y), 26), 30); }
  if (!__dredd_enabled_mutation(46)) { __dredd_replace_expr_int(__dredd_replace_unary_operator_PreInc_int(&(x), 35), 40); }
  if (!__dredd_enabled_mutation(55)) { __dredd_replace_expr_float(__dredd_replace_unary_operator_PreInc_float(&(y), 47), 51); }
  if (!__dredd_enabled_mutation(67)) { __dredd_replace_expr_int(__dredd_replace_unary_operator_PreDec_int(&(x), 56), 61); }
  if (!__dredd_enabled_mutation(76)) { __dredd_replace_expr_float(__dredd_replace_unary_operator_PreDec_float(&(y), 68), 72); }
  if (!__dredd_enabled_mutation(88)) { __dredd_replace_expr_int(__dredd_replace_unary_operator_PostDec_int(&(x), 77), 82); }
  if (!__dredd_enabled_mutation(97)) { __dredd_replace_expr_float(__dredd_replace_unary_operator_PostDec_float(&(y), 89), 93); }
  if (!__dredd_enabled_mutation(115)) { return __dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(&(x), 98), 100), 106), 109); }
}
