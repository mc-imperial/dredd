#include <cinttypes>
#include <cstddef>
#include <functional>
#include <string>


#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#endif

static thread_local bool __dredd_some_mutation_enabled = true;
static bool __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local bool initialized = false;
  static thread_local uint64_t enabled_bitset[2];
  if (!initialized) {
    bool some_mutation_enabled = false;
    const char* dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable != nullptr) {
      std::string contents(dredd_environment_variable);
      while (true) {
        size_t pos = contents.find(",");
        std::string token = (pos == std::string::npos ? contents : contents.substr(0, pos));
        if (!token.empty()) {
          int value = std::stoi(token);
          int local_value = value - 0;
          if (local_value >= 0 && local_value < 86) {
            enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
            some_mutation_enabled = true;
          }
        }
        if (pos == std::string::npos) {
          break;
        }
        contents.erase(0, pos + 1);
      }
    }
    initialized = true;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_UNARY_PreInc_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++arg()
#define REPLACE_UNARY_PreDec_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --arg()
#define REPLACE_UNARY_PostInc_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg()++
#define REPLACE_UNARY_PostDec_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg()--
#define REPLACE_UNARY_Not_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~arg()
#define REPLACE_UNARY_Not(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~arg
#define REPLACE_UNARY_Minus_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -arg()
#define REPLACE_UNARY_LNot_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !arg()
#define REPLACE_UNARY_LNot(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !arg
#define REPLACE_UNARY_ARG_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg()
#define REPLACE_UNARY_ARG(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return arg
#define REPLACE_EXPR_NOT_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg())
#define REPLACE_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define REPLACE_EXPR_MINUS_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg())
#define REPLACE_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define REPLACE_EXPR_LNOT_EVALUATED(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg())
#define REPLACE_EXPR_LNOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !(arg)
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define REPLACE_EXPR_INC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ++(arg)
#define REPLACE_EXPR_FLOAT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0.0
#define REPLACE_EXPR_FLOAT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1.0
#define REPLACE_EXPR_FLOAT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1.0
#define REPLACE_EXPR_DEC(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return --(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static int& __dredd_replace_unary_operator_PreInc_int(std::function<int&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(++arg());
  REPLACE_UNARY_PreDec_EVALUATED(0);
  REPLACE_UNARY_ARG_EVALUATED(1);
  return MUTATION_RETURN(++arg());
}

static int& __dredd_replace_unary_operator_PreDec_int(std::function<int&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(--arg());
  REPLACE_UNARY_PreInc_EVALUATED(0);
  REPLACE_UNARY_ARG_EVALUATED(1);
  return MUTATION_RETURN(--arg());
}

static int __dredd_replace_unary_operator_PostInc_int(std::function<int&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg()++);
  REPLACE_UNARY_PostDec_EVALUATED(0);
  REPLACE_UNARY_Not_EVALUATED(1);
  REPLACE_UNARY_Minus_EVALUATED(2);
  REPLACE_UNARY_LNot_EVALUATED(3);
  REPLACE_UNARY_ARG_EVALUATED(4);
  return MUTATION_RETURN(arg()++);
}

static int __dredd_replace_unary_operator_PostDec_int(std::function<int&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg()--);
  REPLACE_UNARY_PostInc_EVALUATED(0);
  REPLACE_UNARY_Not_EVALUATED(1);
  REPLACE_UNARY_Minus_EVALUATED(2);
  REPLACE_UNARY_LNot_EVALUATED(3);
  REPLACE_UNARY_ARG_EVALUATED(4);
  return MUTATION_RETURN(arg()--);
}

static int __dredd_replace_unary_operator_Minus_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(-arg);
  REPLACE_UNARY_Not(0);
  REPLACE_UNARY_LNot(1);
  REPLACE_UNARY_ARG(2);
  return MUTATION_RETURN(-arg);
}

static int __dredd_replace_expr_int_lvalue(int& arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_INC(0);
  REPLACE_EXPR_DEC(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int(std::function<int()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg());
  REPLACE_EXPR_LNOT_EVALUATED(0);
  REPLACE_EXPR_NOT_EVALUATED(1);
  REPLACE_EXPR_MINUS_EVALUATED(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg());
}

static int __dredd_replace_expr_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_LNOT(0);
  REPLACE_EXPR_NOT(1);
  REPLACE_EXPR_MINUS(2);
  REPLACE_EXPR_INT_ZERO(3);
  REPLACE_EXPR_INT_ONE(4);
  REPLACE_EXPR_INT_MINUS_ONE(5);
  return MUTATION_RETURN(arg);
}

static float& __dredd_replace_unary_operator_PreInc_float(std::function<float&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(++arg());
  REPLACE_UNARY_PreDec_EVALUATED(0);
  REPLACE_UNARY_ARG_EVALUATED(1);
  return MUTATION_RETURN(++arg());
}

static float& __dredd_replace_unary_operator_PreDec_float(std::function<float&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(--arg());
  REPLACE_UNARY_PreInc_EVALUATED(0);
  REPLACE_UNARY_ARG_EVALUATED(1);
  return MUTATION_RETURN(--arg());
}

static float __dredd_replace_unary_operator_PostInc_float(std::function<float&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg()++);
  REPLACE_UNARY_PostDec_EVALUATED(0);
  REPLACE_UNARY_Minus_EVALUATED(1);
  REPLACE_UNARY_LNot_EVALUATED(2);
  REPLACE_UNARY_ARG_EVALUATED(3);
  return MUTATION_RETURN(arg()++);
}

static float __dredd_replace_unary_operator_PostDec_float(std::function<float&()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg()--);
  REPLACE_UNARY_PostInc_EVALUATED(0);
  REPLACE_UNARY_Minus_EVALUATED(1);
  REPLACE_UNARY_LNot_EVALUATED(2);
  REPLACE_UNARY_ARG_EVALUATED(3);
  return MUTATION_RETURN(arg()--);
}

static float __dredd_replace_expr_float(std::function<float()> arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg());
  REPLACE_EXPR_MINUS_EVALUATED(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg());
}

static float __dredd_replace_expr_float(float arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

static double __dredd_replace_expr_double(double arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_MINUS(0);
  REPLACE_EXPR_FLOAT_ZERO(1);
  REPLACE_EXPR_FLOAT_ONE(2);
  REPLACE_EXPR_FLOAT_MINUS_ONE(3);
  return MUTATION_RETURN(arg);
}

int main() {
  int x = __dredd_replace_expr_int(3, 0);
  float y = __dredd_replace_expr_float(__dredd_replace_expr_double(3.532, 6), 10);
  if (!__dredd_enabled_mutation(25)) { __dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostInc_int([&]() -> int& { return static_cast<int&>(x); }, 14)); }, 19); }
  if (!__dredd_enabled_mutation(34)) { __dredd_replace_expr_float([&]() -> float { return static_cast<float>(__dredd_replace_unary_operator_PostInc_float([&]() -> float& { return static_cast<float&>(y); }, 26)); }, 30); }
  if (!__dredd_enabled_mutation(37)) { __dredd_replace_unary_operator_PreInc_int([&]() -> int& { return static_cast<int&>(x); }, 35); }
  if (!__dredd_enabled_mutation(40)) { __dredd_replace_unary_operator_PreInc_float([&]() -> float& { return static_cast<float&>(y); }, 38); }
  if (!__dredd_enabled_mutation(43)) { __dredd_replace_unary_operator_PreDec_int([&]() -> int& { return static_cast<int&>(x); }, 41); }
  if (!__dredd_enabled_mutation(46)) { __dredd_replace_unary_operator_PreDec_float([&]() -> float& { return static_cast<float&>(y); }, 44); }
  if (!__dredd_enabled_mutation(58)) { __dredd_replace_expr_int([&]() -> int { return static_cast<int>(__dredd_replace_unary_operator_PostDec_int([&]() -> int& { return static_cast<int&>(x); }, 47)); }, 52); }
  if (!__dredd_enabled_mutation(67)) { __dredd_replace_expr_float([&]() -> float { return static_cast<float>(__dredd_replace_unary_operator_PostDec_float([&]() -> float& { return static_cast<float&>(y); }, 59)); }, 63); }
  if (!__dredd_enabled_mutation(85)) { return __dredd_replace_expr_int(__dredd_replace_unary_operator_Minus_int(__dredd_replace_expr_int(__dredd_replace_expr_int_lvalue(x, 68), 70), 76), 79); }
}
