#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#ifdef _MSC_VER
#define thread_local __declspec(thread)
#elif __APPLE__
#define thread_local __thread
#else
#include <threads.h>
#endif

static thread_local int __dredd_some_mutation_enabled = 1;
static int __dredd_enabled_mutation(int local_mutation_id) {
  static thread_local int initialized = 0;
  static thread_local uint64_t enabled_bitset[1];
  if (!initialized) {
    int some_mutation_enabled = 0;
    const char* dredd_environment_variable = getenv("DREDD_ENABLED_MUTATION");
    if (dredd_environment_variable) {
      char* temp = malloc(strlen(dredd_environment_variable) + 1);
      strcpy(temp, dredd_environment_variable);
      char* token;
      token = strtok(temp, ",");
      while(token) {
        int value = atoi(token);
        int local_value = value - 0;
        if (local_value >= 0 && local_value < 15) {
          enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
          some_mutation_enabled = 1;
        }
        token = strtok(NULL, ",");
      }
      free(temp);
    }
    initialized = 1;
    __dredd_some_mutation_enabled = some_mutation_enabled;
  }
  return enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64));
}

#define MUTATION_RETURN(arg) arg
#define REPLACE_UNARY_Not(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~arg
#define REPLACE_UNARY_Minus(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -arg
#define REPLACE_UNARY_LNot(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return !arg
#define REPLACE_EXPR_INT_ZERO(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 0
#define REPLACE_EXPR_INT_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return 1
#define REPLACE_EXPR_INT_MINUS_ONE(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -1
#define MUTATION_EXPR_NOT(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return ~(arg)
#define MUTATION_EXPR_MINUS(mutation_id_offset) if (__dredd_enabled_mutation(local_mutation_id + mutation_id_offset)) return -(arg)
#define MUTATION_PRELUDE(arg) if (!__dredd_some_mutation_enabled) return arg
static unsigned int __dredd_replace_expr_unsigned_int_one(unsigned int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_NOT(0);
  REPLACE_EXPR_INT_ZERO(1);
  return MUTATION_RETURN(arg);
}

static unsigned int __dredd_replace_expr_unsigned_int_constant(unsigned int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_NOT(0);
  REPLACE_EXPR_INT_ZERO(1);
  REPLACE_EXPR_INT_ONE(2);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_unary_operator_Not_int(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(~arg);
  REPLACE_UNARY_Minus(0);
  REPLACE_UNARY_LNot(1);
  return MUTATION_RETURN(~arg);
}

static int __dredd_replace_unary_operator_LNot_int_zero(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(!arg);
  REPLACE_UNARY_Not(0);
  return MUTATION_RETURN(!arg);
}

static int __dredd_replace_expr_int_zero(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  REPLACE_EXPR_INT_ONE(0);
  REPLACE_EXPR_INT_MINUS_ONE(1);
  return MUTATION_RETURN(arg);
}

static int __dredd_replace_expr_int_constant(int arg, int local_mutation_id) {
  MUTATION_PRELUDE(arg);
  MUTATION_EXPR_NOT(0);
  MUTATION_EXPR_MINUS(1);
  REPLACE_EXPR_INT_ZERO(2);
  REPLACE_EXPR_INT_ONE(3);
  REPLACE_EXPR_INT_MINUS_ONE(4);
  return MUTATION_RETURN(arg);
}

int main() {
  unsigned int x = __dredd_replace_expr_unsigned_int_one(__dredd_replace_unary_operator_LNot_int_zero(__dredd_replace_expr_int_zero(0, 0), 2), 3);
  unsigned int y = __dredd_replace_expr_unsigned_int_constant(__dredd_replace_unary_operator_Not_int(__dredd_replace_expr_int_constant(7, 5), 10), 12);
}
