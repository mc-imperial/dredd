#include <cstdlib>
#include <functional>

static int __dredd_enabled_mutation() {
  static bool initialized = false;
  static int value;
  if (!initialized) {
    const char* __dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (__dredd_environment_variable == nullptr) {
      value = -1;
    } else {
      value = atoi(__dredd_environment_variable);
    }
    initialized = true;
  }
  return value;
}

static volatile int& __dredd_replace_binary_operator_AddAssign_int_int(std::function<volatile int&()> arg1, std::function<int()> arg2, int mutation_id) {
  switch (__dredd_enabled_mutation() - mutation_id) {
    case 0: return arg1() &= arg2();
    case 1: return arg1() = arg2();
    case 2: return arg1() /= arg2();
    case 3: return arg1() *= arg2();
    case 4: return arg1() |= arg2();
    case 5: return arg1() %= arg2();
    case 6: return arg1() <<= arg2();
    case 7: return arg1() >>= arg2();
    case 8: return arg1() -= arg2();
    case 9: return arg1() ^= arg2();
    default: return arg1() += arg2();
  }
}

void foo() {
  volatile int a;
  if (__dredd_enabled_mutation() != 10) { __dredd_replace_binary_operator_AddAssign_int_int([&]() -> volatile int& { return static_cast<volatile int&>(a); }, [&]() -> int { return static_cast<int>(2); }, 0); }
}
