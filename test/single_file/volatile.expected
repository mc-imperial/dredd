#include <cinttypes>
#include <cstdlib>
#include <functional>

static bool __dredd_enabled_mutation(int local_mutation_id) {
  static bool initialized = false;
  static uint64_t enabled_bitset[1];
  if (!initialized) {
    const char* __dredd_environment_variable = std::getenv("DREDD_ENABLED_MUTATION");
    if (__dredd_environment_variable != nullptr) {
      int value = atoi(__dredd_environment_variable);
      int local_value = value - 0;
      if (local_value >= 0 && local_value < 11) {
        enabled_bitset[local_value / 64] |= (1 << (local_value % 64));
      }
    }
    initialized = true;
  }
  return (enabled_bitset[local_mutation_id / 64] & (1 << (local_mutation_id % 64))) != 0;
}

static volatile int& __dredd_replace_binary_operator_AddAssign_int_int(std::function<volatile int&()> arg1, std::function<int()> arg2, int local_mutation_id) {
  if (__dredd_enabled_mutation(local_mutation_id + 0)) return arg1() &= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 1)) return arg1() = arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 2)) return arg1() /= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 3)) return arg1() *= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 4)) return arg1() |= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 5)) return arg1() %= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 6)) return arg1() <<= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 7)) return arg1() >>= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 8)) return arg1() -= arg2();
  if (__dredd_enabled_mutation(local_mutation_id + 9)) return arg1() ^= arg2();
  return arg1() += arg2();
}

void foo() {
  volatile int a;
  if (!__dredd_enabled_mutation(10)) { __dredd_replace_binary_operator_AddAssign_int_int([&]() -> volatile int& { return static_cast<volatile int&>(a); }, [&]() -> int { return static_cast<int>(2); }, 0); }
}
